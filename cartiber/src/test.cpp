#include "utility.h"
#include "GaussianProcess.hpp"
// #include "GPKFLO.hpp"
// #include "GPMAPLO.hpp"

int main(int argc, char **argv)
{
    GPMixer gmp(0.01102);
    Vector3d X(4.3, 5.7, 11);
    Vector3d V(2, 20, 19);
    Vector3d A(15, 07, 24);



    Matrix3d DJrXVA_DX_analytic = gmp.DJrXV_DX(X, V);
    Matrix3d DJrXVA_DX_autodiff;
    DJrXVA_DX_autodiff
      <<  1.4795693330913913078012550976876, -0.09272692763418464904582492184798, -0.60125453973064792810535942193768,
         -0.2078396293352800836208836614803,    2.106797535770925924175386355789, -0.13284986373953439932235327939372,
         -1.0285119629145335820195952420107,  -0.2735388145177689190297496754912,  0.11676300088524277297144403964954;
        
    printf("DJrXVA_DX_analytic error: %f\n",
           (DJrXVA_DX_analytic - DJrXVA_DX_autodiff).cwiseAbs().maxCoeff());
    cout << DJrXVA_DX_analytic << endl;




    Matrix3d DDJrXVA_DXDX_analytic = gmp.DDJrXVA_DXDX(X, V, A);
    Matrix3d DDJrXVA_DXDX_autodiff;
    DDJrXVA_DXDX_autodiff
      << -0.16628561001097342169099087651306,  8.7415558053382500878863515533626,   21.68743802346549542495135587745,
          2.1985844499890389278582167128789,  -8.7635373891101820685190252965589,   0.31275656668973516839002466049998,
         -1.3623292065783150943538504915428,  -0.26089688300928635412337970935968, -6.6683728805496298190367494634219;

    printf("DDJrInvXVA_DXDX_analytic error: %f\n",
           (DDJrXVA_DXDX_analytic - DDJrXVA_DXDX_autodiff).cwiseAbs().maxCoeff());
    cout << DDJrXVA_DXDX_analytic << endl;




    Matrix3d DJrInvXV_DX_analytic = gmp.DJrInvXV_DX(X, V);
    Matrix3d DJrInvXV_DX_autodiff;
    DJrInvXV_DX_autodiff
      <<  53.850477114916400753611771760056,  128.29236486057202749493046758121,  230.1945527540237207146427817569,
         -125.85089351206730209166669504274, -210.15361822396008007225049065689, -306.92185420033828389935326258456,
          62.016904967876696903384730702615,  43.162622478265109060739271800087,  70.152538431552944140723451235805;
    printf("DJrInvXV_DX_analytic error: %f\n",
           (DJrInvXV_DX_analytic - DJrInvXV_DX_autodiff).cwiseAbs().maxCoeff());
    cout << DJrInvXV_DX_analytic << endl;




    Matrix3d DDJrInvXVA_DXDX_analytic = gmp.DDJrInvXVA_DXDX(X, V, A);
    Matrix3d DDJrInvXVA_DXDX_autodiff;
    DDJrInvXVA_DXDX_autodiff
        << -6604.1192221875057982056387635241, -11742.978198354910825157363234684, -23023.800403371279667546327746653,
            11716.420889581207373357214899501,  19044.19517655420675726016405003,   30943.951304134615906701614255486,
           -4275.5969103108402017377943730546, -4438.3051006541123211015442832802, -7571.1236170508494051731665778526;
            
    printf("DDJrInvXVA_DXDX_analytic error: %f\n",
           (DDJrInvXVA_DXDX_analytic - DDJrInvXVA_DXDX_autodiff).cwiseAbs().maxCoeff());
    cout << DDJrInvXVA_DXDX_analytic << endl;
}