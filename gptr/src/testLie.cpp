#include "utility.h"
#include "GaussianProcess.hpp"
#include "SE3JQ.hpp"

using namespace Eigen;
using namespace std;

typedef Eigen::Vector3d Vec3;
typedef Eigen::Matrix3d Mat3;


int main(int argc, char **argv)
{
    Vec3 X(4.3, 5.7, 91.0);
    Vec3 Xd(11, 2, 19);
    
    SO3d R = SO3d::exp(X);

    Mat3 Jr = GPMixer::Jr(X);
    Mat3 JrInv = GPMixer::JrInv(X);

    Vec3 _X = -X;
    Mat3 Jr_ = GPMixer::Jl(_X);
    Mat3 JrInv_ = GPMixer::JlInv(_X);

    cout << "Jr\n" << Jr << endl;
    cout << "JrInv\n" << JrInv << endl;
    cout << "Jr*JrInv\n" << Jr*JrInv << endl;

    cout << "Jr\n" << Jr_ << endl;
    cout << "JrInv\n" << JrInv_ << endl;
    cout << "Jr*JrInv\n" << Jr_*JrInv_ << endl;

    cout << "Jr err \n" << Jr - Jr_ << endl;
    cout << "JrInv err\n" << JrInv - JrInv_ << endl;

    // GPMixer gmp(0.01102, Vector3d(10, 10, 10).asDiagonal(), Vector3d(10, 10, 10).asDiagonal());

    Vec3 O = GPMixer::Jr(X)*Xd;
    Matrix3d HX_XXd_direct = GPMixer::DJrUV_DU(X, Xd);
    Matrix3d HX_XXd_circle = -GPMixer::Jr(X)*GPMixer::DJrInvUV_DU(X, O);

    cout << "HX_XXd error:\n" << HX_XXd_direct - HX_XXd_circle << endl;
    cout << "HX_XXd_direct\n" << HX_XXd_direct << endl;
    cout << "HX_XXd_circle\n" << HX_XXd_circle << endl;   


    SE3Q<double> myQ;
    SE3Qp<double> myQp;

    Vector3d The(4.3, 5.7, 91.0);
    Vector3d Thed(7.1, 10.1, 10.0);
    Vector3d Thedd(1.5, 0.7, 20.15);

    Vector3d Rho(11.02, 3.04, 26.0);
    Vector3d Rhod(3.3, 60.05, 6.9);
    Vector3d Rhodd(2.0, 0.3, 4.2);

    Vector3d Omg = GPMixer::Jr(The)*Thed;

    // Vector3d Alp = GPMixer::Jr(The)*Thedd + GPMixer::DJrUV_DU(The, Thed)*Thed;
    // Vector3d Nuy = GPMixer::Jr(The)*Rhod;
    // Vector3d Ups = GPMixer::Jr(The)*Rhod;
    
    TicToc tt_qtime;
    myQ.ComputeQSC(The, Rho, Thed, Rhod);
    printf("tt_qtime: %f s\n", tt_qtime.Toc());
    cout << "Q value:\n" << myQ.Q << endl;
    
    TicToc tt_qptime;
    myQp.ComputeQSC(The, Rho, Thed, Rhod, Omg);
    printf("tt_qptime: %f s\n", tt_qptime.Toc());
    cout << "Q' value:\n" << myQp.Q << endl;

    // Confirm that Q = -Exp(-The)*H1(-The, Rho)
    cout << "Q  error:\n" << myQ.Q  - (-(SO3d::exp(-The).matrix()*GPMixer::DJrUV_DU(Vector3d(-The), Rho))) << endl;
    // Confirm that Qp = -JrInv*Q*JrInv
    cout << "Q' error:\n" << myQp.Q - (-(GPMixer::JrInv(The)*myQ.Q*GPMixer::JrInv(The))) << endl;

    Matrix3d Q___, S1__, C11_, C12_, C13_, S2__, C21_, C22_, C23_;

    /* #region  */
    Q___<<
    -0.27606657890206515171271917097329,
    -0.04841190528495784017870562365715,
    0.12325770315319962977529399950072,
    0.06491007847231609895199966331347,
    -0.28379564658289702094862150261179,
    0.03220353738991836578531291479521,
    0.11683202260787924064988629879736,
    0.03289294694641983068938984047236,
    -0.01374133978251581081342358459096;
    S1__<<
    -0.10420562289324271365575924619407,
    -0.12869000662689725200671375660022,
    -2.32312976367504386843165775644593,
    0.09719175238912111658429182625696,
    0.15956808520656370897761178184737,
    2.41398708817864582343304391542915,
    -0.02068253410064482128438712038587,
    -0.01256748627909954653392166079584,
    -0.03797362184689343639343306335832;
    C11_<<
    0.93021696434225409344520585364080,
    1.78412981592265174057843069022056,
    26.84968784906627448094695864710957,
    1.09021381635161129786126821272774,
    1.70894777746216064429063408169895,
    24.64528508888971458645755774341524,
    0.17202529838747851465008409377333,
    -0.47525372243718416731539377906302,
    -2.80130307661426236620627605589107;
    C12_<<
    -0.03147871058691103368643027238249,
    -0.05995514974879118108574971302005,
    -0.95160644539692451626677893727901,
    0.04399108688419393897728326692231,
    0.07779768217335686353308688012476,
    0.98924166357941112348584056235268,
    -0.01612754522900548131980613675296,
    -0.02901172064896630209407391021159,
    -0.01490740933868923458194277742450;
    C13_<<
    0.62421075908884549043875722418306,
    -3.10990564836310401375385481514968,
    0.17072240327124241221490308362263,
    3.13036713850171999240501463646069,
    0.61079303147904506765542009816272,
    -0.19530463169650552623934913754056,
    -0.23403962168482345118647458548367,
    0.11427493105525755867635240292657,
    -0.01460093116982727826091981171430;
    S2__<<
    0.11876213355420794925976224476472,
    -0.00369119382432474534699862189768,
    -0.09669205402277558647483601816930,
    0.00250165625552032202041918829138,
    0.12064793271368141891475289639857,
    -0.09529911795461759593806050361309,
    0.06447284493262382676359578681513,
    0.09787755900559241828418066688755,
    0.00062593062750420540903822930190;
    C21_<<
    -0.03147871058691103368643027238249,
    -0.05995514974879118108574971302005,
    -0.95160644539692451626677893727901,
    0.04399108688419393897728326692231,
    0.07779768217335686353308688012476,
    0.98924166357941112348584056235268,
    -0.01612754522900548131980613675296,
    -0.02901172064896630209407391021159,
    -0.01490740933868923458194277742450;
    C22_<<
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000;
    C23_<<
    -0.11300216006672469948313164422871,
    0.00914570269991075296411864314905,
    0.02130274180256805025002186937400,
    0.05676738965062743530465283470221,
    -0.03430025194173392383278908823740,
    0.65389839893049828134508061339147,
    0.04672620417746253806967615673784,
    0.65473164041046005845458921612590,
    -0.08499188899123681639746763494259;
    /* #endregion */
    
    cout << "Q   numerical error: "  << (myQ.Q   - Q___).cwiseAbs().maxCoeff() << endl;
    cout << "S1  numerical error: "  << (myQ.S1  - S1__).cwiseAbs().maxCoeff() << endl;
    cout << "C11 numerical error: "  << (myQ.C11 - C11_).cwiseAbs().maxCoeff() << endl;
    cout << "C12 numerical error: "  << (myQ.C12 - C12_).cwiseAbs().maxCoeff() << endl;
    cout << "C13 numerical error: "  << (myQ.C13 - C13_).cwiseAbs().maxCoeff() << endl;
    cout << "S2  numerical error: "  << (myQ.S2  - S2__).cwiseAbs().maxCoeff() << endl;
    cout << "C11 numerical error: "  << (myQ.C11 - C11_).cwiseAbs().maxCoeff() << endl;
    cout << "C12 numerical error: "  << (myQ.C12 - C12_).cwiseAbs().maxCoeff() << endl;
    cout << "C13 numerical error: "  << (myQ.C13 - C13_).cwiseAbs().maxCoeff() << endl;    

    Matrix3d Qp___, Sp1__, Cp11_, Cp12_, Cp13_, Sp2__, Cp21_, Cp22_, Cp23_;

    /* #region  */
    Qp___<<
    -612.02081473804355482570827007293701,
    -11.15875168041248954864386178087443,
    30.85758226454096586621744791045785,
    14.84124831958751045135613821912557,
    -611.03080504751687840325757861137390,
    32.75155188362483471564701176248491,
    27.81758226454096316615505202207714,
    43.77155188362483784203504910692573,
    -3.81279170105399023427139582054224;
    Sp1__<<
    73.39070156778583964296558406203985,
    0.54142539261656974503011952037923,
    10.58440348954987619833900680532679,
    0.94226685812990007562461869383696,
    73.92327245304497296274348627775908,
    9.95246662411237714707112900214270,
    -2.33744956271806891834330599522218,
    -5.73379746327464623334435600554571,
    -0.69142956879064099151577238444588;
    Cp11_<<
    45.77333863973847627448776620440185,
    -36.65303911686708460138106602244079,
    -598.84617063737869102624244987964630,
    32.30568463458443062563674175180495,
    111.19922081656719115017040167003870,
    613.10778811629165829799603670835495,
    -20.12645736850905819892432191409171,
    -22.58256014507567144278255000244826,
    -12.72211659922898974173222086392343;
    Cp12_<<
    30.34190198654745884709882375318557,
    0.22762584599059751400140783061943,
    11.43564115494773680836715357145295,
    1.63804810269898770691554545919644,
    32.22731327278113866441344725899398,
    28.33913424110010481626886758022010,
    -1.09270605465602899109001100441674,
    -2.60249986777981190400055311329197,
    -2.36416621699686757551717164460570;
    Cp13_<<
    -740.10960400373289758135797455906868,
    9.85048403738305289323307079030201,
    105.60191234461105125319591024890542,
    9.85048403738305289323307079030201,
    -737.24689677762535211513750255107880,
    112.84216398173451523234689375385642,
    105.60191234461105125319591024890542,
    112.84216398173451523234689375385642,
    -19.72279557830668750284530688077211;
    Sp2__<<
    0.38505995833400119554568163948716,
    5.17131526429971888347836284083314,
    -4.71935719217318450091624981723726,
    -5.27686001514027847036913954070769,
    0.82468335518477076107046741526574,
    4.02565256495616452525609929580241,
    0.24209207430390178306112147765816,
    -0.40127505179751982167246637800417,
    -0.01924134699306674287089258257311;
    Cp21_<<
    -0.03147871058691103368643027238249,
    -0.05995514974879118108574971302005,
    -0.95160644539692451626677893727901,
    0.04399108688419393897728326692231,
    0.07779768217335686353308688012476,
    0.98924166357941112348584056235268,
    -0.01612754522900548131980613675296,
    -0.02901172064896630209407391021159,
    -0.01490740933868923458194277742450;
    Cp22_<<
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000;
    Cp23_<<
    -247.85823676870697340746119152754545,
    -2.55745770312542219926399411633611,
    41.83353235761325095154461450874805,
    4.34254229687457726782895406358875,
    -247.05144848320588835122180171310902,
    17.02473773260695821818444528616965,
    -18.21646764238674620628444245085120,
    20.32473773260695892872718104626983,
    -1.93801260852489187769265299721155;
    /* #endregion */

    cout << "Qp   numerical error: "  << (myQp.Q   - Qp___).cwiseAbs().maxCoeff() << endl;
    cout << "Sp1  numerical error: "  << (myQp.S1  - Sp1__).cwiseAbs().maxCoeff() << endl;
    cout << "Cp11 numerical error: "  << (myQp.C11 - Cp11_).cwiseAbs().maxCoeff() << endl;
    cout << "Cp12 numerical error: "  << (myQp.C12 - Cp12_).cwiseAbs().maxCoeff() << endl;
    cout << "Cp13 numerical error: "  << (myQp.C13 - Cp13_).cwiseAbs().maxCoeff() << endl;
    cout << "Sp2  numerical error: "  << (myQp.S2  - Sp2__).cwiseAbs().maxCoeff() << endl;
    cout << "Cp11 numerical error: "  << (myQp.C11 - Cp11_).cwiseAbs().maxCoeff() << endl;
    cout << "Cp12 numerical error: "  << (myQp.C12 - Cp12_).cwiseAbs().maxCoeff() << endl;
    cout << "Cp13 numerical error: "  << (myQp.C13 - Cp13_).cwiseAbs().maxCoeff() << endl;
    

    // Create the H and H' matrices of SE3
    Matrix<double, 6, 6> SE3H; SE3H.setZero();
    SE3H.block<3, 3>(0, 0) = GPMixer::DJrUV_DU(The, Thed);
    SE3H.block<3, 3>(3, 0) = myQ.S1 + GPMixer::DJrUV_DU(The, Rhod);
    SE3H.block<3, 3>(3, 3) = myQ.S2;

    Matrix<double, 6, 6> SE3H_;
    
    /* #region  */
    SE3H_<<
    0.11876213355420794925976224476472,
    -0.00369119382432474534699862189768,
    -0.09669205402277558647483601816930,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00250165625552032202041918829138,
    0.12064793271368141891475289639857,
    -0.09529911795461759593806050361309,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.06447284493262382676359578681513,
    0.09787755900559241828418066688755,
    0.00062593062750420540903822930190,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00000000000000000000000000000000,
    0.00729734407524723713983627604307,
    -0.11064588872881084280486163606838,
    -2.48664104388213580421052029123530,
    0.11876213355420794925976224476472,
    -0.00369119382432474534699862189768,
    -0.09669205402277558647483601816930,
    0.07060639254901469874514674529564,
    0.27867591707033195769227518212574,
    1.77265485534088540475750050973147,
    0.00250165625552032202041918829138,
    0.12064793271368141891475289639857,
    -0.09529911795461759593806050361309,
    -0.00775017680108034279912176955918,
    0.63355161584749275505146215436980,
    -0.03184918929561989658916232315278,
    0.06447284493262382676359578681513,
    0.09787755900559241828418066688755,
    0.00062593062750420540903822930190;
    /* #endregion */

    cout << "SEH3 numerical error: "  << (SE3H - SE3H_).cwiseAbs().maxCoeff() << endl;
    // cout << "SEH3: " << endl << SE3H << endl;

    Matrix<double, 6, 1> Xi; Xi << The, Rho;
    Matrix<double, 6, 1> Xid; Xid << Thed, Rhod;
    Matrix<double, 6, 1> Xidd; Xidd << Thedd, Rhodd;

    Matrix<double, 6, 1> Tau = GPMixer::Jr(Xi)*Xid;
    Matrix<double, 6, 1> Wrn = GPMixer::Jr(Xi)*Xidd + SE3H*Xid;

    Matrix<double, 6, 1> Tau_;
    Matrix<double, 6, 1> Wrn_;
    
    /* #region  */
    Tau_<<
    0.70803449619167235784544800480944,
    0.52132104746770180359050073093385,
    10.90202111753637304047970246756449,
    0.57877335681299157954526890534908,
    -1.58678174153978579496993006614503,
    11.72568159674946386417104804422706;
    Wrn_<<
    0.77749061080929748879242424663971,
    1.53406182339223273736195096716983,
    21.59461581651028438955108867958188,
    -24.19341526664975461358153552282602,
    28.41509436231157081920173368416727,
    16.33084332327182153221656335517764;

    /* #endregion */
    cout << "Tau numerical error: "  << (Tau - Tau_).cwiseAbs().maxCoeff() << endl;
    cout << "Wrn numerical error: "  << (Wrn - Wrn_).cwiseAbs().maxCoeff() << endl;
    // cout << "Wrn                : "  << endl << Wrn << endl;

    Vector3d Nuy = Tau.block<3, 1>(3, 0);

    Matrix<double, 6, 6> SE3Hp; SE3Hp.setZero();
    SE3Hp.block<3, 3>(0, 0) = GPMixer::DJrInvUV_DU(The, Omg);
    SE3Hp.block<3, 3>(3, 0) = myQp.S1 + GPMixer::DJrInvUV_DU(The, Nuy);
    SE3Hp.block<3, 3>(3, 3) = myQp.S2;

    Matrix<double, 6, 1> Xid_reverse = GPMixer::JrInv(Xi)*Tau;
    Matrix<double, 6, 1> Xidd_reverse = GPMixer::JrInv(Xi)*Wrn + SE3Hp*Xid;

    cout << "SE3Jr error:\n"       << (GPMixer::Jr(Xi)*GPMixer::JrInv(Xi) - MatrixXd::Identity(6, 6)).cwiseAbs().maxCoeff() << endl;
    cout << "Xd_reverse error:\n"  << (Xid_reverse - Xid                                            ).cwiseAbs().maxCoeff() << endl;
    cout << "Xdd_reverse error:\n" << (Xidd_reverse - Xidd                                          ).cwiseAbs().maxCoeff() << endl;

    Mat3 S1, S2;
    S1.setZero(); S2.setZero();

    TicToc tt_s;
    SE3Q<double>::ComputeS(The, Rho, Thed, Rhod, S1, S2);
    tt_s.Toc();

    cout << "S1 numerical error: "  << (myQ.S1 - S1).cwiseAbs().maxCoeff() << myprintf(", Time: %f", tt_s.GetLastStop()) << endl;
    cout << "S2 numerical error: "  << (myQ.S2 - S2).cwiseAbs().maxCoeff() << myprintf(", Time: %f", tt_s.GetLastStop()) << endl;

    Mat3 Sp1, Sp2;
    Sp1.setZero(); Sp2.setZero();
    
    TicToc tt_sp;
    SE3Qp<double>::ComputeS(The, Rho, Omg, Sp1, Sp2);
    tt_sp.Toc();

    cout << "Sp1 numerical error: "  << (myQp.S1 - Sp1).cwiseAbs().maxCoeff() << myprintf(", Time: %f", tt_sp.GetLastStop()) << endl;
    cout << "Sp2 numerical error: "  << (myQp.S2 - Sp2).cwiseAbs().maxCoeff() << myprintf(", Time: %f", tt_sp.GetLastStop()) << endl;

}